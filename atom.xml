<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rollstone]]></title>
  <link href="http://merlinli.github.com/atom.xml" rel="self"/>
  <link href="http://merlinli.github.com/"/>
  <updated>2016-01-09T16:23:51+08:00</updated>
  <id>http://merlinli.github.com/</id>
  <author>
    <name><![CDATA[Merlin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C和C++里的sizeof]]></title>
    <link href="http://merlinli.github.com/blog/2016/01/07/sizeof-in-c-plus-plus/"/>
    <updated>2016-01-07T20:03:00+08:00</updated>
    <id>http://merlinli.github.com/blog/2016/01/07/sizeof-in-c-plus-plus</id>
    <content type="html"><![CDATA[<p>首先要明白的是sizeof 是一个操作符，而不是一个函数。 </p>

<hr />
<p><strong>用法</strong>：<br />
<strong>sizeof(</strong> type <strong>)</strong>  (1)   <br />
<strong>sizeof</strong> expression   (2)	</p>

<p>返回值都是<strong>std::size_t</strong>.   <br />
第一种用法是返回类型所占的字节数，对于<strong>参数是类型的一定要加括号</strong><br />
第二种是返回表达式所返回的对象的所占的字节数，可加括号，可不加</p>

<p><strong>NOTE</strong></p>

<ol>
  <li>不同的电脑架构，一个字节可能是8个比特位或者更多，具体多少个bit，可以查看<strong>CHAR_BIT</strong>.  </li>
  <li>sizeof(char), sizeof(signed char), 和 sizeof(unsigned char) 总是返回<strong>1</strong>.  </li>
  <li>
    <p>对于结构体和类，sizeof 的结果是加了内存对齐之后的值。 <br />
 strcut A{<br />
  int a;  <br />
  char b;<br />
  }<br />
  则sizeof (A) 结果是 8       </p>
  </li>
  <li><strong>当数组做形参时候，sizeof 的结果是指针的大小</strong></li>
</ol>

<p><strong>sizeof 和 strlen的区别</strong>：<br />
1. sizeof是计算类型所占的内存大小，一般在编译时候就能确定大小，而strlen是在运行时候计算的。<br />
2. 因为sizeof返回的是内存占用大小，所以对字符串常量计算的时候多加一个占位符，而strlen是计  算字符串实际大小，不包括最后的占位符。<br />
下面的结果是在I4P8的机器上：<br />
&gt; char a[100]=”abcd”; //  the sizeof a is 100, the strlen(a) is 4<br />
&gt;<br />
&gt; char b[]=”abcd”;    // the sizeof b is 5, the strlen(b) is 4 <br />
&gt; 
&gt; char a = ‘a’ ;  // the sizeof a  is 1
&gt; 
&gt; sizeof ‘c’      //the result is 4，单引号表示字符的ASCII值，所以返回是是个int<br />
&gt; 
&gt; sizeof “c”     // 2 ,字符和占位符加起来是两个</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最大子序和的联机解法]]></title>
    <link href="http://merlinli.github.com/blog/2015/12/15/maxsubsequencesum/"/>
    <updated>2015-12-15T17:42:00+08:00</updated>
    <id>http://merlinli.github.com/blog/2015/12/15/maxsubsequencesum</id>
    <content type="html"><![CDATA[<h2 id="section">最大子序和的问题</h2>

<h4 id="section-1">问题描述：</h4>
<p>给定整数A<sub>1</sub>,  A<sub>2</sub> ,…  A<sub>N</sub>, 求 <script type="math/tex">\sum_{k=i}^{j}A_k</script>的最大值（<strong>为方便起见，如果所有整数为负数，则最大子序和为0</strong>）</p>

<p>下面直接给出最后的算法，直接的解法可以看其它人的博客</p>

<pre><code>int MaxSubSequenceSum(const int A[], int N )
{
    int CurtSum = 0;
    int MaxSum  = 0;  
    
    for (int j =0; j&lt;N;j++)
    {
        CurtSum += A[j];
        if(CurtSum &gt; MaxSum)   
            MaxSum = CurSum;
        else if( CurtSum&lt;0 )
            CurSum = 0 ;
	}  

    return MaxSum;
}
</code></pre>

<p>那这个算法为什么正确呢？   <br />
假设有如下序列：  </p>

<blockquote>
  <p>3, -2 , 3 , -100 , 4 , -2  </p>
</blockquote>

<p>如果按照上面的算法，其实是计算了两个子序列<br />
A[0]~A[2] 累加为 4， 遇到A[3]=-100，序列和小于0，CurSum从0开始重新计算，A[4]~A[5]和为2,<br />
然后取这两个子序列大的为MaxSum。<br />
那以A[1]为开头的子序列你一个都没算过，你怎么知道最大的不在其中呢？   </p>

<p>有个关键点是：<br />
&gt; 定理1：如果一个序列的和为负数，那么这个序列肯定不是另外一个<strong>最大子</strong>序列的前缀</p>

<p>我们假设如下：   </p>

<script type="math/tex; mode=display">\sum_{k=i}^{j-1}A_k >=0</script>

<script type="math/tex; mode=display">% &lt;![CDATA[
\sum_{k=i}^{j}A_k <0  %]]&gt;</script>

<p>也就是说A[j] 是使<script type="math/tex">\sum_{k=i}^j</script>为负的那个元素。<br />
根据定理1有如下推论：
<strong>如果存在一个最大子序列是以A[i]开头的，那么最后一个元素的下标肯定是小于j的</strong></p>

<p>假设<strong>i&lt;p&lt;j</strong></p>

<p>那么我们有如下结论：  </p>

<p><script type="math/tex">\sum_{k=p}^qA_k</script> （q&lt;n）   <strong>&lt;=</strong>   <script type="math/tex">\sum_{k=i}^qA_k</script> （i&lt;p,q&lt;n）  </p>

<p><strong>因为i和p之间的元素和肯定是大于0的</strong>    <br />
也就是说从p开始的任意子序和都不大于以A[i]开始并包含它的子序列的和。 <br />
那根据前面的推论，如果有以A[i]开始的最大子序列，最后一个元素的下标识小于j的。</p>

<div id="disqus_thread"></div>
<script>
/**
* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');

s.src = '//merlinli.disqus.com/embed.js';

s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用net-snmp监控特定的网卡]]></title>
    <link href="http://merlinli.github.com/blog/2013/09/24/snmp-monitor-special-interface/"/>
    <updated>2013-09-24T17:15:00+08:00</updated>
    <id>http://merlinli.github.com/blog/2013/09/24/snmp-monitor-special-interface</id>
    <content type="html"><![CDATA[<p>net-snmp的监控网卡的默认配置是监控所有的网卡，所以有些你不用的网卡仍然会发送trap，这会给你造成困扰<br />
默认配置： <br />
如果配置文件里是   </p>

<pre><code>linkUpDownNotifications yes
</code></pre>

<p>等效于下面的配置	</p>

<pre><code>notificationEvent  linkUpTrap    linkUp   ifIndex ifAdminStatus ifOperStatus  
notificationEvent  linkDownTrap  linkDown ifIndex ifAdminStatus ifOperStatus  

monitor  -u cjslyxz -r 600 -e linkUpTrap   "Generate linkUp" ifOperStatus != 2
monitor  -u cjslyxz -r 600 -e linkDownTrap "Generate linkDown" ifOperStatus == 2
</code></pre>

<p>这个是监控所有的网卡的，即使那个网卡被你用“ifconfig”之类的命令disable掉了，它仍然会发送trap.<br />
可惜net-snmp不支持”ifOperStatus == 2 And ifAdminStatus ！= 2 ”这样的表达式。<br />
但是我们仍然有两种解决方案。<br />
##方案一
修改配置如下</p>

<pre><code>notificationEvent  eth0_linkUpTrap    linkUp   ifIndex.2 ifAdminStatus.2 ifOperStatus.2 ifName.2 ifDescr.2
notificationEvent  eth0_linkDownTrap  linkDown ifIndex.2 ifAdminStatus.2 ifOperStatus.2 ifName.2 ifDescr.2

monitor -u cjslyxz -t -r 600 -e eth0_linkUpTrap   "eth0 linkUp"  -I ifOperStatus.2 != 2
monitor -u cjslyxz -t -r 600 -e eth0_linkDownTrap "eth0 linkDown"  -I ifOperStatus.2 == 2
</code></pre>

<p>我们显式使用 “-I”选项表示OID是精确匹配的，那我们是怎样知道这个OID是关联哪个网卡的呢？<br />
用命令 </p>

<pre><code>snmpwalk -v 2c localhost ifDescr

.1.3.6.1.2.1.2.2.1.2.1 = STRING: lo
.1.3.6.1.2.1.2.2.1.2.2 = STRING: eth0
.1.3.6.1.2.1.2.2.1.2.4 = STRING: eth1 IfOperStatus和ifDescr都是ifEntry的成员，每个ifEntry对应一个interface(网卡)，所以ifOperStaus.2肯定就是eth0的operrate状态。所以上面的配置就是只关心eth0的状态，只要eth0网线断了就会发送trap.  
</code></pre>

<h2 id="section">方案二</h2>
<p>从驱动中把这个网卡禁用掉  </p>

<ul>
  <li>
    <p>显示你的驱动所能识别的网卡的名字  </p>

    <pre><code>  # ls -l /sys/bus/pci/drivers/bnx2 
  total 0
  lrwxrwxrwx 1 root root    0 Sep 24 11:34 0000:02:00.0 -&gt; ../../../../devices/pci0000:00/0000:00:1c.0/0000:02:00.0
  lrwxrwxrwx 1 root root    0 Sep 24 11:34 0000:02:00.1 -&gt; ../../../../devices/pci0000:00/0000:00:1c.0/0000:02:00.1
  # ls -Ll /sys/bus/pci/drivers/bnx2/0000:02:00.0/net
  total 0
  drwxr-xr-x 4 root root 0 Sep 24 11:34 eth0
</code></pre>
  </li>
</ul>

<p>从上面的输出可以看到”0000:02:00.0“ 是和 “eth0“相对应的。</p>

<ul>
  <li>
    <p>从驱动中禁用这个网卡</p>

    <pre><code>  echo "0000:02:00.0"" &gt;/sys/bus/pci/drivers/bnx2/unbind
</code></pre>
  </li>
</ul>

<p>如果机器重启的话，这个网卡会被重新识别。如果想不重启再重新用这个网卡，用下面的命令：</p>

<pre><code>echo "0000:02:00.0"" &gt;/sys/bus/pci/drivers/bnx2/bind
</code></pre>

<p>其实如果你看net-snmp的代码，operstaus 和adminstatus的值都是从调用函数“ioctl”带着“SIOCGIFFLAGS”参数从驱<br />
动中获取的。如果设备是状态是“IFF_UP”那就设adminstatus=up, 如果是“IFF_RUNNING” 那就设operstaus=up,mib里<br />
描述的其他状态其实都没处理。  </p>

<p>代码：  </p>

<pre><code>if(ifentry-&gt;os_flags &amp; IFF_UP) {
        ifentry-&gt;admin_status = IFADMINSTATUS_UP;
        if(ifentry-&gt;os_flags &amp; IFF_RUNNING)
            ifentry-&gt;oper_status = IFOPERSTATUS_UP;
        else
            ifentry-&gt;oper_status = IFOPERSTATUS_DOWN;
    }
    else {
        ifentry-&gt;admin_status = IFADMINSTATUS_DOWN;
        ifentry-&gt;oper_status = IFOPERSTATUS_DOWN;
    }
</code></pre>

<p>“ifconfig down”命令只会清除“IFF_UP”标志位<br />
“ifconfig up”命令会设置“IFF_UP”标志位  </p>

<p>如果插上网线，可以发送接收数据包，则设置“IFF_RUNNING”标志位。</p>

<p>所以所有出现在ifconfig里的网卡“ifAdminStatus=up”，没插网线<br />
的网卡“ifOperStatus=down”.还有个规则就是如果“ifAdminStatus=down”<br />
则对应网卡的“ifOperStatus=down”。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB 调试mysql cluster 代码]]></title>
    <link href="http://merlinli.github.com/blog/2013/08/15/build-and-debug-mysql-source-code/"/>
    <updated>2013-08-15T14:40:00+08:00</updated>
    <id>http://merlinli.github.com/blog/2013/08/15/build-and-debug-mysql-source-code</id>
    <content type="html"><![CDATA[<pre><code>1.下载code
2.编译，安装
3.配置
4.调试
</code></pre>

<h2 id="code">1.下载code</h2>

<p>download link 
<a href="http://dev.mysql.com/downloads/cluster/#downloads" title="mysql cluster soure code">http://dev.mysql.com/downloads/cluster/#downloads</a>
其实就是platform选择source code 就可以了。</p>

<p>这种方式只能下载最新的的code，如果你要下载特定的分支，要下载 Bazaar，这个是mysql的分支管理软件。
详细：<br />
<a href="http://dev.mysql.com/tech-resources/articles/getting-started-with-bazaar-for-mysql.html" title="getting-started-with-bazaar-for-mysql">getting-started-with-bazaar-for-mysql.html</a></p>

<h2 id="section">2.编译，安装</h2>
<p>不同版本可能编译方式不同，所以最好找到编译的说明文件，代码下载好了在./BUILD目录下有个README 文件。<br />
你如果要调试的话，肯定是要用debug方式编译。  </p>

<p>对于 mysql-cluster-7.3.2版本 <br />
编译</p>

<blockquote>
  <p>#cd ./BUILD<br />
#cmake -DWITH_DEBUG=1 -DCMAKE_INSTALL_PREFIX=/将来默认安装目录 /home/workspace/mysql-cluster-gpl-7.3.2/   <br />
   <strong>Note</strong>：<br />
             这个命令主要是生成makefile,如果缺少对应的工具自己安装，比如我新装的机器，缺少cmake，
             自己下个源码包编译，安装下就 可以，jdk的版本至少是要1.6.1。设定好$JAVA_HOME,并将之加入到$PATH.   <br />
             WITH_DBUG=1                      表示是DEBUG编译<br />
			 CMAKE_INSTALL_PREFIX=  目录，     表示将来软件安装的默认目录</p>
</blockquote>

<blockquote>
  <p>#make<br />
……<br />
[100%] Built target my_safe_process <br />
   编译完之后最后一句  </p>
</blockquote>

<p>安装
   &gt;#make install<br />
   如果你在cmake阶段没有指定CMAKE_INSTALL_PREFIX 的值，那它的默认安装目录就是/usr/local/mysql.
   这个目录会写死在各种脚本里，特别要注意。</p>

<h2 id="section-1">3.配置</h2>
<pre><code># groupadd mysql
# useradd -r -g mysql mysql
cd 你的安装目录
# chown -R mysql .
# chgrp -R mysql .
# scripts/mysql_install_db --user=mysql  //会在当前目录下生成默认配置文件my.cnf
# chown -R root .
# chown -R mysql data
# chown mysql my.cnf   事实上这些初始化步骤可以很清楚的在安装目录下INSTALL-BINARY里看到。 ### 配置文件修改
&gt;# vi my.cnf  增加以下内容：  
</code></pre>

 	basedir = /home/emenlii/debug-ndb
<pre><code>datadir = /home/emenlii/debug-ndb/data
socket = /home/emenlii/debug-ndb/run/mysql.sock
log-error = /home/emenlii/debug-ndb/log/error.log
log_slow_queries = /home/emenlii/debug-ndb/log/slow.log
</code></pre>

<p>Note：<br />
	 如果你的安装目录跟我不一样，可以用以下的vim命令做个简单的替换。
	:%s/\/home\/mysql\/mysql/\/home\/emenlii\/debug-ndb/g
    这件话的意思是全文搜索 将字符串“/home/mysql/mysql” 替换为 “/home/emenlii/debug-ndb”
    因为我拷贝的是别人的配置文件，别人的安装目录是“/home/mysql/mysql”<br />
    “/home/emenlii/debug-ndb”是我的安装目录。 <br />
    “\/” 第一个反斜杠是转义字符用。</p>

<pre><code>#mkdir log run tmp
</code></pre>

<h2 id="section-2">启动</h2>
<p>#####1.直接启动<br />
	# ./bin/mysqld –basedir=/home/emenlii/debug-ndb/ –datadir=/home/emenlii/debug-ndb/data/ –user=mysql &amp;  </p>

<p>或者
#####2.mysqld_safe
	#./bin/mysqld_safe&amp;<br />
	ps -elf|grep mysql<br />
	4 S root      2383  4975  0  80   0 -  2927 wait   14:13 pts/0    00:00:00 /bin/sh ./bin/mysqld_safe<br />
	4 S mysql     2467  2383  0  80   0 - 122398 -     14:13 pts/0    00:00:00 /home/emenlii/debug-ndb/bin/mysqld –basedir=/home/emenlii/debug-ndb –datadir=/home/emenlii/debug-ndb/data –plugin-dir=/home/emenlii/debug-ndb/lib/plugin –user=mysql –log-error=/home/emenlii/debug-ndb/data/linux-50.err –pid-file=/home/emenlii/debug-ndb/data/linux-50.pid  </p>

<h3 id="mysql">打开mysql客户端</h3>
<pre><code>#./bin/mysql
mysql&gt; show databases;	  
+--------------------+   
| Database           |  
+--------------------+  
| information_schema |  
| mysql              |  
| performance_schema |    
| test               |  
+--------------------+   4 rows in set (0.00 sec)
</code></pre>

<h2 id="section-3">调试</h2>

<pre><code># ./bin/mysqladmin shutdown //先关闭进程
# gdb -args /home/emenlii/debug-ndb/bin/mysqld --basedir=/home/emenlii/debug-ndb/ --datadir=/home/emenlii/debug-ndb/data/ --user=mysql  
然后加断点，然后就可以在GDB里 run, 另开一个窗口操作mysql客户端
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll在windows下中文问题]]></title>
    <link href="http://merlinli.github.com/blog/2013/07/25/jekyll-chinese-encoding/"/>
    <updated>2013-07-25T17:01:00+08:00</updated>
    <id>http://merlinli.github.com/blog/2013/07/25/jekyll-chinese-encoding</id>
    <content type="html"><![CDATA[<p>首先你的英文编写必须完全正确。
其次你的文件必须是”utf-8 without BOM” 而不仅仅是utf-8.
在windows下utf-8文件都会被加上BOM头。一些编辑软件可以做到这点，比如notepad++,MarkdownPad等。
如果编码正确了，还是会报错：
&gt;Liquid error: incompatible character encodings: UTF-8 and IBM437”</p>

<p>这是因为你的控制台不能使用UTF-8,比如我使用的是win7的powershell.
解决办法是更改控制台编码：
打开powershell 直接输入
&gt;chcp 65001</p>

<p>chcp  ：更改字码页<br />
65001 ：UTF8</p>

<p>MORE:<a href="http://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E9%A1%B5" title="代码页">代码页 wiki</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样获得root密码]]></title>
    <link href="http://merlinli.github.com/blog/2013/07/25/how-to-get-root-passwd/"/>
    <updated>2013-07-25T15:10:00+08:00</updated>
    <id>http://merlinli.github.com/blog/2013/07/25/how-to-get-root-passwd</id>
    <content type="html"><![CDATA[<p>如果机器在你手中并且是用grub启动的,那么这一切就很简单。
在启动的时候，在boot kernel的option里加入“rw init=/bin/bash”</p>

<p>确定回车，你会发现自己已经有root权限了，这时候你就可以更改root密码了。
&gt; # passwd root</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hellow World]]></title>
    <link href="http://merlinli.github.com/blog/2012/11/25/hellow-world/"/>
    <updated>2012-11-25T18:49:00+08:00</updated>
    <id>http://merlinli.github.com/blog/2012/11/25/hellow-world</id>
    <content type="html"><![CDATA[<p>Hellow World! <br />
真有人这么蛋疼的写博客么？！</p>
]]></content>
  </entry>
  
</feed>
